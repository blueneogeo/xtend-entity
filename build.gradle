// SETUP BUILDSCRIPT ///////////////////////////////////////////////////////////
buildscript {
  repositories {
    jcenter()
    maven {
	 url 'https://plugins.gradle.org/m2/'
    }
    maven {
	 url "${artifactory_url}/plugins-release"
	 credentials {
	   username artifactory_user
	   password artifactory_password
	 }
    }
  }

  dependencies {
    classpath 'org.xtext:xtext-gradle-plugin:1.0.15'
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
  }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

// CONFIGURE ALL SUBPROJECTS ///////////////////////////////////////////////////
subprojects {
  apply plugin: 'eclipse'
  apply plugin: 'nebula.provided-base'
  apply plugin: 'java'
  apply plugin: 'org.xtext.xtend'
  apply plugin: 'maven-publish'
  apply plugin: 'jacoco'

  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion

  eclipse.project.name = rootProject.name + '-' + project.name

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
		 url "${artifactory_url}/main"
		 credentials {
		   username artifactory_user
		   password artifactory_password
		 }
    }
  }

  dependencies {
    compile "org.eclipse.xtend:org.eclipse.xtend.lib:${xtendVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    testCompile "junit:junit:${junitVersion}"
  }
	xtend {
		preferences = [ 'useJavaCompilerCompliance':true ]
	}

  task sourcesJar( type: Jar, dependsOn: classes ) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar( type: Jar, dependsOn: javadoc ) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  tasks.withType( Javadoc ) {
    if ( JavaVersion.current().isJava8Compatible() ) {
	 options.addStringOption( 'Xdoclint:none', '-quiet' )
    }
  }

  task install( dependsOn: publishToMavenLocal )

  jar {
    baseName rootProject.name + '-' + project.name
  }

  jacoco {
    toolVersion = '0.7.6.201602180812'
  }

  jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports.html.enabled true
  }

  publishing {
    publications {
	 mavenJava( MavenPublication ) {
	   artifactId rootProject.name + '-' + project.name
	   from components.java
	   artifact sourcesJar
	   artifact javadocJar
	   pom.withXml {
		asNode().dependencies.'*'.each() {
		  it.scope*.value = 'compile'
		}
	   }
	 }
    }
    repositories {
	 maven {
	   url "${artifactory_url}/main-local"
	   credentials {
		username artifactory_user
		password artifactory_password
	   }
	 }
    }
  }
}

project('annotations') {
  dependencies {
    compile 'com.kimengi.util:xtend-tools-core:latest.release'
  }
}

project('test') {
  dependencies {
    compile project(':annotations')

    // testCompile project(':yaml')
    // testCompile project(':csv')
    // testCompile project(':jackson')

    testCompile 'com.kimengi.util:xtend-tools-test:latest.release'
    testCompile 'io.vertx:vertx-core:3.1.0'
  }
}

project('yaml') {
  dependencies {
    compile project(':annotations')
    compile 'org.yaml:snakeyaml:1.17'

    testCompile project(':test')
  }
}

project('csv') {
  dependencies {
    compile project(':annotations')
    compile 'org.apache.commons:commons-csv:latest.release'

    testCompile project(':test')
  }
}

project('jackson') {
  dependencies {
    compile project(':annotations')
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.1'

    testCompile project(':test')
  }
}

